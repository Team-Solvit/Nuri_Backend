extend type Query {
    getMyBoardingHouse : BoardingHouseInfo
    getBoardingRoomAndBoardersInfoList(userId : String) : [BoardingRoomAndBoardersInfo]
    getBoardingRoom(roomId : String!) : BoardingRoomInfo
    getBoardingRoomCommentList(getBoardingRoomCommentListInput : GetBoardingRoomCommentListRequest!) : [BoardingRoomCommentInfo]!
}

extend type Mutation {
    createBoardingRoom(createBoardingRoomInput : CreateBoardingRoomRequest!) : String
    updateBoardingRoom(updateBoardingRoomInput : UpdateBoardingRoomRequest!) : String
    deleteBoardingRoom(roomId : String!) : String

    likeRoom(roomId : String!) : String
    unlikeRoom(roomId : String!) : String

    createBoardingRoomComment(createBoardingRoomInput : CreateBoardingRoomCommentRequest) : String
    updateBoardingRoomComment(updateBoardingRoomCommentInput : UpdateBoardingRoomCommentRequest!) : String
    deleteBoardingRoomComment(commentId : String!) : String
}

input UpdateBoardingRoomCommentRequest {
    commentId : String!
    content : String!
}

input GetBoardingRoomCommentListRequest {
    start : Int!
    roomId : String!
}

input CreateBoardingRoomCommentRequest {
    roomId : String!
    contents : String!
}

input CreateBoardingRoomRequest {
    files : [String!]!
    boardingRoomInfo : BoardingRoomUpsertInfo!
    contractPeriod : [Int!]!,
    options : [String]!
}

input UpdateBoardingRoomRequest {
    roomId : String!
    files : [String!]!
    boardingRoomInfo : BoardingRoomUpsertInfo!
    contractPeriod : [Int!]!,
    options : [String]!
}

input BoardingRoomUpsertInfo {
    name : String!
    description : String
    monthlyRent : Int!
    headCount : Int!
}

type BoardingRoomCommentInfo {
    commentId : String!
    roomId : String
    commenter : UserInfo
    content : String!
}

type BoardingRoomAndBoardersInfo {
    room : BoardingRoomInfo
    boarders : [BoarderInfo]
}

type BoardingRoomInfo {
    roomId : String
    boardingHouse : BoardingHouseInfo
    name : String
    description : String
    monthlyRent : Int
    headCount : Int
    status : RoomStatus
    boardingRoomOption : [BoardingRoomOption]
    boardingRoomFile : [BoardingRoomFile]
    contractPeriod : [ContractPeriod]
    day : String
}

type BoardingHouseInfo {
    houseId : String
    host : HostInfo
    name : String
    location : String
    houseCallNumber : String
    description : String
    nearestStation : String
    nearestSchool : String
    gender : Gender
    isMealProvided : Boolean
}

enum Gender {
    MALE, FEMALE, ALL
}

type BoardingRoomOption {
    optionId : String
    roomId : String
    name : String
}

type BoardingRoomFile {
    fileId : String
    boardingRoomId : String
    url : String
}

type ContractPeriod {
    contractPeriodId : String
    roomId : String
    contractPeriod : Int
}

enum RoomStatus {
    EMPTY_ROOM
    FULL
    REMAIN
}