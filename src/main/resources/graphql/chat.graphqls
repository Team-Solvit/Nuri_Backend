scalar DateTime
scalar UUID

input RoomDtoInput {
    name: String!
    profile: String
}

input RoomCreateRequestDto {
    roomDto: RoomDtoInput!
    users: [String!]!
    isTeam: Boolean!
}

input RoomInviteRequestDto {
    users: [String!]!
    roomId: String!
}

input ChatRecordRequestDto {
    roomId: String!
    contents: String!
    replyChat: ReplyChatInput
}

type ChatRecordResponseDto {
    id: UUID!
    roomId: String
    sender: Sender!
    createdAt: DateTime!
    contents: String!
    replyChat: ReplyChat
}

type NotificationResponseDto {
    name: String!
    picture: String!
    roomId: String!
    contents: String!
    sendAt: DateTime!
}

type RoomDto {
    name: String!
    profile: String
}

type RoomCreateResponseDto {
    id: UUID
    room: RoomDto
    users: [String!]
}

type RoomReadResponseDto {
    roomDto: RoomDto!
    latestMessage: String
    latestCreatedAt: DateTime
}

type Query {
    readMessages(roomId: String!): [ChatRecordResponseDto!]!
    getRooms(page: Int!, size: Int!): RoomReadPage!
    getRoomsGroupChat: [String!]!
}

type RoomReadPage {
    content: [RoomReadResponseDto!]!
    pageInfo: PageInfo!
}

type PageInfo {
    pageNumber: Int!
    pageSize: Int!
    totalElements: Int!
    totalPages: Int!
}

type Sender {
    name: String!
    profile: String!
}

input ReplyChatInput {
    chatId: String!
    contents: String!
    name: String!
}

type ReplyChat {
    chatId: String!
    contents: String!
    name: String!
}

type Mutation {
    createRoom(roomCreateRequestDto: RoomCreateRequestDto!): RoomCreateResponseDto!
    invite(roomInviteRequestDto: RoomInviteRequestDto!): Boolean
    exit(roomId: String!): Boolean
    kick(roomId: String!, userId: String!): Boolean
}
