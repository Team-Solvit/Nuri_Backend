extend type Query {
    getOAuth2Link(provider: String!): String!
}

extend type Mutation {
    oauthLogin(oauthLoginInput : OAuth2LoginInput!) : OAuth2LoginResponse!
    oauthSignUp(oauthSignUpInput : OAuth2SignUpInput!) : String

    localSignUp(localSignUpInput: LocalSignUpInput!) : String
    localLogin(localLoginInput: LocalLoginInput!) : String
    reissue : String
    logout : String
}

input OAuth2LoginInput {
    code : String!
    provider : String!
}

type OAuth2LoginResponse {
    oauthId : String
    isNewUser : Boolean!
}

input OAuth2SignUpInput {
    oauthId : String!
    id : String!
    email : String!
    country : String!
    language : String!
    userAgreement : UserAgreement!
}

input UserAgreement {
    agreedTermsOfService : Boolean!
    agreedPrivacyCollection : Boolean!
    agreedPrivacyThirdParty : Boolean!
    agreedIdentityAgencyTerms : Boolean!
    agreedIdentityPrivacyDelegate : Boolean!
    agreedIdentityUniqueInfo : Boolean!
    agreedIdentityProviderTerms : Boolean!
}

input LocalLoginInput {
    id : String!
    password : String!
}

input LocalSignUpInput {
    name : String!
    id : String!
    email : String!
    password : String!
    country : String!
    language : String!
    userAgreement : UserAgreement!
}